<?php

// $Id: media_mover_ui.module,v 1.1.2.50 2010/07/04 14:50:00 arthuregg Exp $

/**
 * @file
 * This file contains all the UI elements for the Media mover
 * configuration adding, editing, etc.
 *
 */

/**
 * @TODO
 *   Form validation for add/edit
 */


define('MMA_FORM_DELIMETER', '--');

/* ****************************************** */
/* Drupal Hooks                               */
/* ****************************************** */


/**
 * Implements hook_menu().
 * @return array
 */
function media_mover_ui_menu() {
  // ------------------------------------------------
  // MAIN TABS for admin/media_mover

  // Media Mover landing page
  $items['admin/build/media_mover'] = array(
    'title' => 'Media Mover',
    'page callback' => 'media_mover_ui_landing_page',
    'access arguments' => array('administer media_mover'),
    'description' => 'Build and configure Media Mover operations',
  );

  // Render landing page as the default tab
  $items['admin/build/media_mover/default'] = array(
    'title' => 'Configurations',
    'page callback' => 'media_mover_ui_steps_all',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -3,
  );

  // Add a new configuration
  $items['admin/build/media_mover/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array('media_mover_ui_config_add_form'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -2,
  );

  // View a step in the system
  // @TODO This is not supported right now
  /* ****************
   * Steps are currently not an editable item
  $items['admin/build/media_mover/steps'] = array(
    'title' => 'Steps',
    'access arguments' => array('administer media_mover'),
    'page callback' => 'media_mover_ui_steps_view',
    'page arguments' => array(5),
    'weight' => -1,
    'type' => MENU_LOCAL_TASK,
  );

  // View a step in the system
  $items['admin/build/media_mover/steps/default'] = array(
    'title' => 'Steps',
    'access arguments' => array('administer media_mover'),
    'page callback' => 'media_mover_ui_steps_view',
    'page arguments' => array(5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Edit a step in the system
  $items['admin/build/media_mover/steps/edit'] = array(
    'title' => 'Steps',
    'access arguments' => array('administer media_mover'),
    'page callback' => 'media_mover_ui_step_edit',
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
  );
  */

  // Settings main tab
  $items['admin/build/media_mover/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_mover_ui_admin_settings'),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
  );

  // Settings main tab defaults
  $items['admin/build/media_mover/settings/media_mover_api'] = array(
    'title' => 'Defaults',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_mover_ui_admin_settings'),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  // Tools main tab
  $items['admin/build/media_mover/tools'] = array(
    'title' => 'Tools',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_mover_ui_admin_settings'),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
  );

  // Tools default tab
  $items['admin/build/media_mover/tools/default'] = array(
    'title' => 'Tools',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_mover_ui_admin_settings'),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  // Update steps/configurations database from code based steps/configurations
  $items['admin/build/media_mover/tools/update'] = array(
    'title' => 'Update Defaults',
    'page callback' => 'media_mover_ui_update_defaults',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_CALLBACK,
  );

  // Import a configuration
  $items['admin/build/media_mover/tools/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_mover_ui_import_config_form'),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 8,
    'file' => 'media_mover_ui_io.inc',
  );

  // Tests to run with media mover
  $items['admin/build/media_mover/tests'] = array(
    'title' => 'Tests',
    'page callback' => 'media_mover_ui_tests',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  // Files as a tab
  $items['admin/build/media_mover/files'] = array(
    'title' => 'Files',
    'page callback' => 'media_mover_ui_files_list',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
  );


  // -------------------------------------------------------
  // Configuration menu items

  // Add the configuration pages to the menu tree
  $items['admin/build/media_mover/configuration'] = array(
    'type' => MENU_LOCAL_TASK,
  );

  // Create a landing page for each of the configurations. This
  // adds a menu entry for each configuration
  if ($configurations = media_mover_api_configurations_get()) {
    foreach ($configurations as $cid => $configuration) {
      $items['admin/build/media_mover/configuration/'. $cid ] = array(
        'title' => $configuration->name,
        'page callback' => 'media_mover_ui_configuration_view',
        'page arguments' => array(4),
        'access arguments' => array('administer media_mover'),
        'description' => $configuration->description,
      );
    }
  }

  // We do not want to render tabs unless we are on a config page
  // Configuration view tab
  $items['admin/build/media_mover/configuration/%/view'] = array(
    'title' => 'Configuration',
    'title callback' => 'media_mover_ui_menu_configuration_title_callback',
    'title arguments' => array(4),
    'position' => 'left',
    'page callback' => 'media_mover_ui_configuration_view',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );

  // Edit tab for a configuration
  $items['admin/build/media_mover/configuration/%/edit'] = array(
    'title' => 'Edit Configuration',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array('media_mover_ui_config_edit_form', 4),
    'type' => MENU_LOCAL_TASK,
  );

  // run tab for a configuration
  $items['admin/build/media_mover/configuration/%/run'] = array(
    'title' => 'Run',
    'page callback' => 'media_mover_ui_configuration_run',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
  );

  // file tab for a configuration
  $items['admin/build/media_mover/configuration/%/files'] = array(
    'title' => 'Files',
    'page callback' => 'media_mover_ui_files_list',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
  );

  // Reset all the step statuses
  $items['admin/build/media_mover/configuration/%/steps_reset'] = array(
    'title' => 'Confirm Configuration Status Change',
    'page callback' => 'media_mover_ui_config_steps_reset',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(4),
  );

  // change the status of a media mover configuration
  $items['admin/build/media_mover/configuration/%/status'] = array(
    'title' => 'Confirm Configuration Status Change',
    'page callback' => 'media_mover_ui_configuration_status_change',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(4, 6),
  );

  // clear non finished files for a config
  $items['admin/build/media_mover/configuration/%/files/clear'] = array(
    'title' => 'Files',
    'page callback' => 'media_mover_ui_config_files_clear',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array(arg(4)),
  );

  // delete an existing configuration
  $items['admin/build/media_mover/configuration/%/delete'] = array(
    'title' => 'Confirm Configuration Deletion',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array('media_mover_ui_config_delete_confirm', 4),
  );

  // Empty an existing configuration of files
  $items['admin/build/media_mover/configuration/%/empty'] = array(
    'title' => 'Confirm Configuration Deletion',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array('media_mover_ui_config_empty_confirm', 4),
  );

  // Clone an existing configuration
  $items['admin/build/media_mover/configuration/%/clone'] = array(
    'title' => 'Clone Configuration',
    'page callback' => 'media_mover_ui_config_clone',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array(4),
  );

  // -------------------------------------------------------
  // File tasks

  // files status
  $items['admin/build/media_mover/files/status'] = array(
    'title' => 'File Status',
    'page callback' => 'media_mover_ui_files_status',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_CALLBACK,
  );

  // edit a file
  $items['admin/build/media_mover/file/edit'] = array(
    'title' => 'Edit File',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_CALLBACK,
    'page arguments' => array('media_mover_ui_edit_file_form', 5),
  );

  // delete a file
  $items['admin/build/media_mover/file/delete'] = array(
    'title' => 'Delete File',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_CALLBACK,
    'page arguments' => array('media_mover_ui_file_delete_confirm_form', 5),
  );

  // -------------------------------------------------------
  // File tasks

  // rerun a conversion on an existing node
  $items['media_mover/rerun/%/node/%'] = array(
    'title' => 'Rerun process',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_CALLBACK,
    'page arguments' => array('media_mover_ui_rerun_node_form', arg(2), arg(4)),
  );

  return $items;
}


/**
 * Implementation of hook_perm().
 *
 * @ingroup drupal_hooks
 * @return array
 */
function media_mover_ui_perm() {
  return array('administer media_mover');
}

/**
 * Implementation of hook_theme().
 * @return unknown_type
 */
function media_mover_ui_theme() {
  return array(
    'media_mover_ui_configuration_action_select' => array(
      'arguments' => array('element' => NULL),
      'file' => 'media_mover_ui.theme.inc',
    )
  );
}


/* ************************************************ */
/* Media Mover Menu functions                       */
/* ************************************************ */

/**
 * menu helper to get the name of the configuration into the menu tab
 * @param int $cid
 *   configuration id
 * @return string
 */
function media_mover_ui_menu_configuration_title_callback($cid) {
  $configuration = media_mover_api_configuration_get($cid);
  return $configuration->name;
}


/* ****************************************** */
/* Media Mover landing page                   */
/* ****************************************** */

/**
 * display information about media_mover modules
 * and existing configurations
 * @return string html
 */
function media_mover_ui_landing_page() {
  // add the css file
  drupal_add_css(drupal_get_path('module', 'media_mover_ui') . '/media_moverui.css');

  // Get all the configrations
  if ($configurations = media_mover_api_configurations_get()) {
    foreach ($configurations as $configuration) {
      $row = array();
      // handle the status of the current configuration
      switch ($configuration->status) {
        case MMA_CONFIG_STATUS_ENABLED:
          $status = t('ready') .' ('. l(t('disable'), 'admin/build/media_mover/configuration/'.  $configuration->cid .'/status/'. MMA_CONFIG_STATUS_ENABLED) .')';
        break;
        case MMA_CONFIG_STATUS_RUNNING:
          $status = t('running') .' ('. l(t('stop'), 'admin/build/media_mover/configuration/'. $configuration->cid .'/status/'. MMA_CONFIG_STATUS_STOPPED) .')';
        break;
        case MMA_CONFIG_STATUS_DISABLED:
          $status = t('disabled') .' ('. l(t('enable'), 'admin/build/media_mover/configuration/'. $configuration->cid .'/status/'. MMA_CONFIG_STATUS_DISABLED) .')';
        break;
      }

      // get the total number of files for this config
      $count = l($configuration->file_count(), 'admin/build/media_mover/configuration/'. $configuration->cid .'/files');
      $error_count = $configuration->file_count(MMA_FILE_STATUS_ERROR);

      // build the name and description
      $name = l($configuration->name, 'admin/build/media_mover/configuration/'. $configuration->cid .'/view') .'<br />'. drupal_substr($configuration->description, 0, 100) .'...';

      // build the row
      $row = array(
        $name,
        $count ."\n". $process_count,
        $configuration->last_start_time ?
          date('M j, Y g:ia', $configuration->last_start_time ) :
          ($configuration->start_time ?
            date('M j, Y g:ia', $configuration->start_time ) : 'never'),
        l(t('run'), 'admin/build/media_mover/configuration/' . $configuration->cid . '/run'),
        // Default configurations can not be edited
        // @TODO need to implement this
        $configuration->settings['default'] ? t('Default') : l(t('edit'), 'admin/build/media_mover/configuration/' . $configuration->cid . '/edit'),
        l(t('Delete'), 'admin/build/media_mover/configuration/' . $configuration->cid . '/delete'),
        l(t('Clone'), 'admin/build/media_mover/configuration/' . $configuration->cid . '/clone'),
      );
      $rows[] = $row;
    }

    $header = array(t('Name'), t('Files'), t('Start time'), t('Run'), t('Edit'), t('Delete'), t('Clone'));
    return theme('table', $header, $rows);
  }

  // No configurations
  return t('Sorry, there are no Media Mover configurations in the system. Please go ahead and create some.');
}

/* ****************************************** */
/* Media Mover ADMIN PAGES                    */
/* ****************************************** */

/**
 * Media Mover administration functions. Place holder
 * to let other modules modify the form and add their
 * own options. Previously this used a hook, that has
 * been depreciated
 * @return array
 */
function media_mover_ui_admin_settings() {
  $form = array();
  $form['admin'] = array(
    '#type' => 'markup',
    '#value' => t('These settings set the default value for all configurations. Settings can be overridden on a per configuration basis by editing the configuration and changing the option values under the <em>advanced</em> option.')
  );
  $form = system_settings_form($form);
  // Weight the buttons down so other modules can insert their elements
  $form['buttons']['#weight'] = 9;
  return $form;
}


/**
 * Landing page for admin/build/media_mover/tools
 * @return array, drupal form
 */
function media_mover_ui_admin_tools_form() {
  $form = array();
  $form['display'] = array(
    '#type' => 'markup',
    '#value' => '<p>'. t('Sometimes it maybe necessary to reset
      the steps and configurations that are defined by modules.
      You can %link.', array('%link' => l(t('reset them here'), 'admin/build/media_mover/tools/update')))
  );

  $links = array(
    l(t('Clear Media Mover configuration cache'), 'admin/build/media_mover/tools/cache/clear/configurations'),
    l(t('Clear Media Mover file cache'), 'admin/build/media_mover/tools/cache/clear/files')
  );
  $form['markup'] = array(

  );
  return $form;
}


/**
 * Force updates the default steps/configurations
 */
function media_mover_ui_update_defaults() {
  media_mover_api_disable();
  media_mover_api_enable();
  drupal_set_message(t('Step and configurations defined by modules have been reset'));
  drupal_goto('admin/build/media_mover/tools/media_mover_api');
}


/**
 * Displays a complete list of all steps
 * in the system
 * @return string
 */
function media_mover_ui_steps_all() {
  // Retrive all steps
  $steps = media_mover_api_steps_get();
  if (! $steps) {
    return t('There are no steps in the system currently');
  }

  $header = array(t('Name'), t('Configurations used on'), t('Edit'), t('Delete'));
  $rows = array();
  foreach ($steps as $sid => $step) {
    $list = '';
    // Get a list of each configuration that uses this step
    $configurations = media_mover_api_step_configurations($sid);
    foreach ($configurations as $configuration) {
      $list .= l($configuration->name, 'admin/build/media_mover/configuration/' . $configuration->cid) . '</br>';
    }

    $row = array(
      $step->name,
      $list,
      l(t('Edit'), 'admin/build/media_mover/steps/edit/' . $step->sid),
      l(t('Clone'), 'admin/build/media_mover/steps/clone/' . $step->sid),
      l(t('Delete'), 'admin/build/media_mover/steps/delete/' . $step->sid),
    );
    $rows[] = $row;
  }

  return theme('table', $header, $rows);
}


/* ****************************************** */
/* ADD / EDIT configuration forms             */
/* ****************************************** */

/**
 * Add configuration form
 */
function media_mover_ui_config_add_form($form_state, $configuration = NULL) {
  drupal_add_css(drupal_get_path('module', 'media_mover_ui') .'/media_mover_ui.css');
  drupal_add_js(drupal_get_path('module', 'media_mover_ui') . '/media_mover_ui.js', 'module');

  // Set the title
  drupal_set_title(t('Add a new configuration'));

  // Build the base configuration form
  $form['configuration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configuration description'),
    '#collapsible' => TRUE,
    '#collapsed' => $form_state['values']['configuration'] ? TRUE : FALSE,
    '#tree' => TRUE,
  );
  $form['configuration']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name your configuration'),
    '#description' => t('Give a descriptive name to your configuration. This must be unique to your configuration. You can also set the !machine_name by hand.', array('!machine_name' => l(t('machine name'), '/', array('attributes' => array('class' => 'machine_name_link'))))),
    '#default_value' => $form_state['values']['configuration']['name'],
    '#attributes' => array('class' => 'step_name', 'step_id' => 0),
    '#required' => TRUE,
  );
  $form['configuration']['cid'] = array(
    '#type' => 'textfield',
    '#title' => t('Machine name for your configuration'),
    '#description' => t('A unique identifier for your configuration.
      One will be generated for you based on the name of your
      configuration if you do not supply one. Machine names can only contain leters, numbers and underscores'),
    '#default_value' => $form_state['values']['configuration']['cid'],
    '#attributes' => array('class' => 'step_machine_name', 'step_id' => 0),
    '#prefix' => '<div class="machine_name_wrapper">',
    '#suffix' => '</div>'
  );
  $form['configuration']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Describe your configuration'),
    '#description' => t('Enter a description for your configuration.'),
    '#default_value' => $form_state['values']['configuration']['description'],
    '#rows' => 2,
  );

  $form['steps'] = array(
    '#tree' => TRUE
  );

  // Build all of the steps' configuration forms
  media_mover_ui_config_add_steps_form($form, $form_state);

  // If we are on the first step, display the harvest options
  if (! isset($form_state['values']['action_choice'])) {
    // Only retrieve the harvest actions
    $actions = media_mover_ui_configuration_form_select_builder(MMA_ACTION_TYPE_HARVEST, FALSE);
    $message = t('Choose the files you would like to use');
  }
  else {
    // Get all non-harvest actions
    $actions = media_mover_ui_configuration_form_select_builder(MMA_ACTION_TYPE_NORMAL);
    $message = t('Choose your next action');
  }

  // Wrap the action selector in a specificly themed display
  $form['next']['select_action']['#theme'] = 'media_mover_ui_configuration_action_select';

  $form['next']['select_action']['action_choice'] = array(
    '#type' => 'select',
    '#title' => $message,
    '#options' => $actions,
    '#default_value' => $action,
    '#attributes' => array('style' => 'float: left;'),
  );

  // Add another action to the configuration
  $form['next']['select_action']['configure'] = array(
    '#type' => 'submit',
    '#value' => t('Add next step'),
    '#submit' => array('media_mover_ui_config_add_form_add_action'),
  );

  // If an action choice has been choosen the user can now save the configuration
  if (isset($form_state['values']['action_choice'])) {
    // add another action to the configuration
    $form['next']['select_action']['save'] = array(
      '#type' => 'submit',
      '#value' => t('Save complete configuration'),
      '#executes_submit_callback' => true,
    );
  }

  return $form;
}


/**
 * Validate the configuration add form
 *
 * @TODO this needs to be refactored with the new form changes
 * @TODO need to validate each step's machine name
 *
 * @param $form
 * @param $form_state
 * @return unknown_type
 */
function media_mover_ui_config_add_form_validate($form, &$form_state) {
  // Check for uniqueness of the new configurations name
  $result = db_result(db_query('SELECT COUNT(cid) FROM {media_mover_configurations} WHERE name = "%s"', $form_state['values']['name']));
  if ($result) {
    form_set_error('name', t('The name you have choosen for your configuration is already in use, please use another.'));
  }

  // Check the configuration machine name (cid) for uniqueness
  if (media_mover_api_machine_name_exists($form_state['values']['config_machine_name'])) {
    form_set_error('config_machine_name', t('The machine name you have choosen for your configuration is already in use, please use another.'));
  }

  // Check the configuration machine name (cid) for bad characters
  if (preg_match("/[^a-zA-Z0-9_]/", $form_state['values']['config_machine_name'])) {
    form_set_error('config_machine_name', t('Your configuration machine name contains illegal characters. You can only use leters, digits and underscores'));
  }
}


/**
 * This is called by the configuration form to add a specific action
 *
 * @TODO is this needed?
 *
 * @param $form
 * @param $form_state
 */
function media_mover_ui_config_add_form_add_action($form, &$form_state) {
  // Rebuild the form
  $form_state['rebuild'] = TRUE;
}


/**
 * Submit function for adding a new media mover configuration
 */
function media_mover_ui_config_add_form_submit($form, &$form_state) {
  $configuration = new media_mover_configuration();

  // Extract any configuration data
  foreach ($form_state['values']['configuration'] as $key => $value) {
    $configuration->{$key} = $value;
  }
  // Extract step data
  foreach ($form_state['values']['steps'] as $step_order => $values) {
    $step = new media_mover_step();
    // Step meta data is stored as an array, extract it into the step
    foreach ($form_state['values']['steps'][$step_order]['meta'] as $key => $value) {
      $step->{$key} = $value;
    }
    // Get the action data for this step
    $action_data = media_mover_ui_form_step_action($form_state['values']['steps'][$step_order]['meta']['action_choice']);
    foreach ($action_data as $key => $value) {
      $step->{$key} = $value;
    }

    // Step settings are stored as an array under settings
    // @TODO this needs to find all the children for complex forms
    if ($settings = $form_state['values']['steps'][$step_order]['settings']) {
      // Settings are under the module name
      $settings = array_shift($settings);
      foreach ($settings as $key => $value) {
        $step->settings[$key] = $value;
      }
    }
    $configuration->steps[$step_order] = $step;
  }
  // Save the configuration
  $configuration->save();

  drupal_set_message(t('Media mover configuration %name created.', array('%name' => $configuration->name)));
  // Redirect the user to the configuration landing page
  $form_state['redirect'] = 'admin/build/media_mover/configuration/'. $configuration->cid .'/view';
  unset($form_state['storage']);
}


/**
 * Builds all step configuration forms
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function media_mover_ui_config_add_steps_form(&$form, $form_state) {
  // If there are any previously created steps create their forms
  if ($form_state['values']['steps']) {
    foreach ($form_state['values']['steps'] as $step_order => $step) {
      if ($step['settings']) {
        $settings = array_shift($step['settings']);
      }
      else {
        $settings = array();
      }
      $form['steps'][$step_order] = media_mover_ui_config_add_step_form($step['meta']['action_choice'], $step_order, FALSE, $settings);
    }
  }
  // If there is a new action requested, display it
  if ($form_state['values']['action_choice']) {
    // Make sure that we have a value for the step order
    if (! isset($step_order)) {
      $step_order = 0;
    }
    else {
      $step_order++;
    }
    $form['steps'][$step_order] = media_mover_ui_config_add_step_form($form_state['values']['action_choice'], $step_order);
  }

}


/**
 * Configuration form for an individual step
 *
 * @param $action_choice
 *   String, action to fetch
 * @param $step_order
 *   Integer, current step
 * @param $display
 *   Boolean, display this action
 * @param $displayed
 *   Boolean, should this fieldset be open?
 * @return $form
 */
function media_mover_ui_config_add_step_form($action_choice, $step_order, $display = TRUE, $settings = FALSE) {
  // Collect the data for this action choice
  $action_data = media_mover_ui_form_step_action($action_choice);

  // Fieldset for the settings for this action. We have to figure out
  // if this fieldset should be displayed. We display it if it is the last action.
  $form = array(
    '#type' => 'fieldset',
    '#title' => t('Step !order: !name', array(
        '!order' => $step_order + 1,
        '!name' => $action_data['description']
      )
    ),
    '#collapsible' => TRUE,
    '#collapsed' => $display ? FALSE : TRUE,
    '#tree' => TRUE,
  );

  $form['meta'] = array(
    '#type' => 'fieldset',
    '#title' => t('Step name'),
    '#description' => t('Provide a unique name and machine name for the step. This is done automatically unless you want to specify it.'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form['meta']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Step name'),
    '#default_value' => $action_data['description'],
    '#description' => t('Describe this step in your configuration. You can also set the !machine_order.',
      array('!machine_order' => l(t('machine name'), '/', array('attributes' => array('class' => 'machine_order_link'))))
    ),
    '#attributes' => array('class' => 'step_order', 'step_id' => $step_order ),
    '#required' => TRUE,
  );
  // This is hidden by default
  $form['meta']['sid'] = array(
    '#type' => 'textfield',
    '#title' => t('Step machine name'),
    '#default_value' => media_mover_api_machine_name_create($action_data['description'], 'step'),
    '#description' =>  t('A unique identifier for this step.
      One will be generated for you based on the name of your
      configuration if you do not supply one.'),
    '#attributes' => array('class' => 'step_machine_order', 'step_id' => $step_order),
    '#prefix' => '<div class="machine_order_wrapper">',
    '#suffix' => '</div>',
    '#required' => TRUE,
  );
  // Store the action choice so the form can be rebuilt in the future
  $form['meta']['action_choice'] = array(
    '#type' => 'value',
    '#value' => $action_choice,
  );
  // Get the step configuration form
  $function = $action_data['configuration'];
  if (function_exists($function)) {
    // Create a stub step
    $step = new media_mover_step();
    // Pull the settings out of the form values
    if ($settings) {
      $step->settings = $settings;
    }
    // Get the action's form
    $form['settings'] = $function($step);
  }
  else {
    $form['settings'] = array(
      '#type' => 'markup',
      '#weight' => -1,
      '#value' => '<div>'. t('There are no settings for this action') .'</div>',
    );
  }

  // Add another action to the configuration
  $form['remove_step'] = array(
    '#type' => 'submit',
    '#value' => t('Remove step !step', array('!step' => $step_order + 1)),
    '#submit' => array('media_mover_ui_config_add_remove_step'),
    '#params' => array('step_order' => $step_order)
  );

  return $form;
}


/**
 * This is called by the configuration form to remove a specific action
 *
 * @param $form
 * @param $form_state
 */
function media_mover_ui_config_add_remove_step($form, &$form_state) {
  if ($step_order = $form_state['clicked_button']['#params']['step_order']) {
    $steps = $form_state['values']['steps'];
    $count = count($steps);
    // If the last element is being removed
    if ($step_order != $count) {
      array_pop($steps);
    }
    // If the step being removed is not the last element
    else {
      for ($i = $step_order + 1; $i <= $count; $i++) {
        $steps[$i - 1] = $steps[$i];
      }
      array_pop($steps);
    }
    drupal_set_message(t('Removed step.'));
    // Add the steps back to the form
    $form_state['values']['steps'] = $steps;
  }
  // Rebuild the form
  $form_state['rebuild'] = TRUE;
}


/**
 * Edit a configuration
 *
 * @TODO potentially refactor the step form to use the same code as the add config form
 *
 * @ingroup media_mover_configuration
 * @param array $form
 * @param int $cid is a configuration id
 * @return array drupal form
 */
function media_mover_ui_config_edit_form($form_state, $cid) {
  drupal_add_css(drupal_get_path('module', 'media_mover_ui') .'/media_mover_ui.css');
  drupal_add_js(drupal_get_path('module', 'media_mover_ui') . '/media_mover_ui.js', 'module');

  // Load the configuration if it has not been stored
  if (! $configuration = $form_state['storage']['configuration']) {
    $configuration = media_mover_api_configuration_get($cid);
    // We need to store the configuration for the submit function
    $form_state['storage']['configuration'] = $configuration;
  }

  // If the configuration is a default configuration (eg: defined in code) it
  // can not be edited
  // @TODO need to figure this out
  if ($configuration->settings['default']) {
    drupal_set_message(t('This configuration is a default configuration that is defined by a module. You can not edit it. If you wish to make modifications to it, clone the configuration and you will be able to edit the clone.'));
    drupal_goto('admin/build/media_mover/configuration/'. $cid);
  }

  // Check if this configuration is currently running, if it is, return user to config screen
  if ($configuration->status == MMA_CONFIG_STATUS_RUNNING) {
    drupal_set_message(t('This configuration is currently running. You need to wait to modify it until it is complete.'), 'error');
    drupal_goto('admin/build/media_mover/configuration/'. $cid);
  }

  // default form elements
  $form['configuration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configuration name'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );
  $form['configuration']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name your configuration'),
    '#description' => t('Give a descriptive name to your configuration'),
    '#default_value' => $configuration->name,
    '#required' => TRUE,
  );
  $form['configuration']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Describe your configuration'),
    '#description' => t('Enter a description for your configuration.'),
    '#default_value' => $configuration->description,
  );
  $form['configuration']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Configuration is enabled'),
    '#description' => t('Configuration will run when requested by cron or other means.'),
    '#default_value' => $configuration->enabled,
    '#required' => TRUE,
  );
  $form['configuration']['cid'] = array(
    '#type' => 'value',
    '#value' => $cid
  );

  $form['steps'] = array(
    '#tree' => TRUE
  );
  // Build the steps form
  foreach ($configuration->steps as $step) {
    // Fieldset for the settings for this action. We have to figure out
    // if this fieldset should be displayed. We display it if it is the last action.
    $form['steps'][$step->step_order] = array(
      '#type' => 'fieldset',
      '#title' => t('Step !step: !name', array('!step' => $step->step_order + 1, '!name' => $step->name)),
      '#collapsible' => TRUE,
    );

    $form['steps'][$step->step_order]['meta'] = array(
      '#type' => 'fieldset',
      '#title' => t('Step name'),
      '#description' => t('Provide a unique name and machine name for the step. This is done automatically unless you want to specify it.'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );
    $form['steps'][$step->step_order]['meta']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Step description'),
      '#default_value' => $step->name,
      '#description' => t('Describe this step in your configuration. You can also set the !machine_name.',
        array('!machine_name' => l(t('machine name'), '/', array('attributes' => array('class' => 'machine_name_link'))))
      ),
      '#attributes' => array('class' => 'step_name', 'step_id' => $step->step_order ),
      '#required' => TRUE,
    );

    // This is hidden by default
    $form['steps'][$step->step_order]['meta']['sid'] = array(
      '#type' => 'textfield',
      '#title' => t('Step machine name'),
       // @TODO note that the machine name uniqueness checking does not work if
       //       if the same step is used twice in the configuration
      '#default_value' => $step->sid,
      '#description' =>  t('The unique identifier for this step.'),
      '#attributes' => array('class' => 'step_machine_name', 'step_id' => $step->step_order),
      '#prefix' => '<div class="machine_name_wrapper">',
      '#suffix' => '</div>',
      '#required' => TRUE,
    );

    // Get the config function name
    $function = $step->configuration;
    if (function_exists($function)) {
      // Get the action's form
       $form['steps'][$step->step_order]['settings'] = $function($step);
    }
    else {
      $form['steps'][$step->step_order]['settings']['default_'. $step->step_order] = array(
        '#type' => 'markup',
        '#weight' => -1,
        '#value' => '<div>'. t('There are no settings for this action') .'</div>',
      );
    }
    $form['steps'][$step->step_order]['remove'] = array(
      '#type' => 'submit',
      '#value' => t('Remove step !step', array('!step' => $step->step_order + 1)),
      '#submit' => array('media_mover_ui_config_edit_remove_action'),
      '#attributes' => array(
        'onclick' => 'javascript: confirm("' . t('Removing this step will delete files created by this specific step. Procede with caution.') .'");'
      ),
      '#params' => array('step_order' => $step->step_order)
    );
  }

  // Wrap the action selector in a specificly themed display
  $form['next']['select_action']['#theme'] = 'media_mover_ui_configuration_action_select';

  $form['next']['select_action']['action_choice'] = array(
    '#type' => 'select',
    '#title' => t('Add an action'),
    '#options' => media_mover_ui_configuration_form_select_builder(MMA_ACTION_TYPE_NORMAL),
    '#attributes' => array('style' => 'float: left;'),
  );

  // Add another action to the configuration
  $form['next']['select_action']['configure'] = array(
    '#type' => 'submit',
    '#value' => t('Add next step'),
    '#submit' => array('media_mover_ui_config_add_form_add_action'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
    '#weight' => 10,
  );
  return $form;
}


/**
 * Saves the edited configuration for data
 *
 * @param string $form_id
 * @param array $form_state
 * @return drupal goto (as all form submits are)
 */
function media_mover_ui_config_edit_form_submit($form, &$form_state) {
  // Get the configuration
  $configuration = $form_state['values']['configuration'];

  // Extract any changed configuration data
  foreach ($form_state['values']['configuration'] as $key => $value) {
    $configuration->{$key} = $value;
  }

  // Extract any changed step data
  foreach($form_state['values']['steps'] as $step_id => $values) {
    // Step meta data is stored as an array, extract it into the step
    foreach ($form_state['values']['steps'][$step_id]['meta'] as $key => $value) {
      $configuration->steps[$step_id]->{$key} = $value;
    }
    // Step settings are stored as an array under settings
    if ($settings = array_shift($form_state['values']['steps'][$step_id]['settings'])) {
      foreach ($settings as $key => $value) {
        $configuration->steps[$step_id]->settings[$key] = $value;
      }
    }
  }

  // Update the configuration
  $configuration->save();

  // @TODO check for added/deleted steps
  if ($form_state['storage']['added_steps']) {

  }
  if ($steps = $form_state['storage']['removed_steps']) {
    foreach ($steps as $step) {
      // Delete files from this step

      // Check for any files that are in this step and advance them
      // if any of these files are locked, what to do? Queue these deletions
      $files = $configuration->get_files($step->step_order);
    }
  }

  drupal_set_message(t('Media mover configuration %config_name updated.', array('%config_name' => $form_state['values']['mm_config_name'])));
  // clear any stored data. Is this needed?
  unset($form_state['storage']);
  $form_state['redirect'] = 'admin/build/media_mover/configuration/' . $configuration->cid . '/view';
}


/**
 * This is called by the configuration form to remove a specific action
 *
 * @param $form
 * @param $form_state
 */
function media_mover_ui_config_edit_remove_step($form, &$form_state) {
  if ($step_order = $form_state['clicked_button']['#params']['step_order']) {
    $steps = $form_state['values']['steps'];
    $count = count($steps);

    // Add the removed step for removal of files on submit
    $form_state['values']['storage']['removed_steps'][$step_order] = $steps[$step_order];

    // If the last element is being removed
    if ($step_order != $count) {
      array_pop($steps);
    }
    // If the step being removed is not the last element
    else {
      for ($i = $step_order + 1; $i <= $count; $i++) {
        $steps[$i - 1] = $steps[$i];
      }
      array_pop($steps);
    }
    drupal_set_message(t('Removed step.'));
    // Add the steps back to the stored configuration
    $form_state['storage']['configuration']->steps = $steps;
  }

  // Rebuild the form
  $form_state['rebuild'] = TRUE;
}


/**
 * This is called by the configuration form to add a specific action
 *
 * @param $form
 * @param $form_state
 */
function media_mover_ui_config_edit_add_step($form, &$form_state) {
  if ($step_order = $form_state['clicked_button']['#params']['step_order']) {
    $steps = $form_state['values']['steps'];
    $count = count($steps);
    // If the last element is being removed
    if ($step_order != $count) {
      array_pop($steps);
    }
    // If the step being removed is not the last element
    else {
      for ($i = $step_order + 1; $i <= $count; $i++) {
        $steps[$i - 1] = $steps[$i];
      }
      array_pop($steps);
    }
    drupal_set_message(t('Removed step.'));
    // Add the steps back to the stored configuration
    $form_state['storage']['configuration']->steps = $steps;
  }

  // Rebuild the form
  $form_state['rebuild'] = TRUE;
}


/**
 * Reset a configuration form
 *
 * @param $cid is a configuration id
 * @return array drupal form
 */
function media_mover_ui_config_empty_confirm($form_state, $cid) {
  // get the current configuration
  $config = media_mover_api_configuration_get($cid);
  $form['markup'] = array(
    '#type' => 'markup',
    '#value' => t('You are about to empty:<br /> %config_name <br /> %config_description <br /><br />'.
      'This removes Media Mover\'s references to items created by this configuration and will delete any files created (unless you choose to not delete them). '.
      'Doing this will take all of this configuration\'s media off line. <br /><br />'.
      'Please only do this if you are debuging an installation or have very good reasons for wanting to do so.<br /><br /.',
      array('%config_name' => $config->name, '%config_description' => $config->description)
    ),
  );

  $form['cid'] = array(
    '#type' => 'value',
    '#value' => $cid
  );
  $form['confirm_delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete this configuration\'s files'),
    '#description' => t('If this is checked, all files created by this configuration will also be removed'),
    '#default_value' => TRUE,
  );
  return confirm_form(
    $form,
    t('Are you sure you want to empty this configuration and remove references to its files?'),
    'admin/build/media_mover',
    t('This action cannot be undone.'),
    t('Empty'),
    t('Cancel'),
    'confirm'
  );
}


/**
 * deletes a configuration submission
 * this only deletes the records of files
 * @param string $form_id
 * @param array $form_state
 */
function media_mover_ui_config_empty_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm_delete']) {
    // run the hook to delete files created by any MM module
    media_mover_api_config_delete_files($form_state['values']['cid']);
    drupal_set_message(t('Deleted files associated with this configuration'));
  }
  db_query('UPDATE {media_mover_step_map} SET status = "%s", start_time = 0, stop_time = 0 WHERE cid = %d', MMA_CONFIG_STATUS_ENABLED, $form_state['values']['cid']);
  drupal_set_message(t('Reset the configuration. Removed all of Media Mover\'s file refrences for this configuration.'));
  $form_state['redirect'] = 'admin/build/media_mover/configuration/'. $form_state['values']['cid'] .'/view';
}


/**
 * deletes a configuration confirm form
 * @param array $drupal_form
 *   drupal form - this is a place holder because of
 * @param int $cid
 *   is a configuration id
 * @return array
 *   drupal form array
 */
function media_mover_ui_config_delete_confirm($drupal_form, $cid) {
  $configuration = media_mover_api_configuration_get($cid);

  // we need to see if this is a parent configuration
  if (count($configuration->hierarchy->children)) {
    drupal_set_message(t('This configuration has child configurations. You can not delete this until you delete the child configurations'));
    drupal_goto('admin/build/media_mover/configuration/'. $cid .'/view');
  }

  $output .= t('You are about to delete:<br /> %config_name <br /> %config_description <br />', array('%config_name' => $config->name, '%config_description' => $config->description) );
  $output .= t('This will also delete references to files, and the files that Media Mover has created with this configuration.');
  $form['markup'] = array(
    '#type' => 'markup',
    '#value' => $output,
  );
  $form['cid'] = array(
    '#type' => 'value',
    '#value' => $cid,
  );

  return confirm_form(
    $form,
    t('Are you sure you want to delete this configuration?'),
    'admin/build/media_mover/configuration/'. $cid .'/view',
    t('This action cannot be undone and will remove ALL files created by this configuration'),
    t('Delete'),
    t('Cancel'),
    'media_mover_api_config_delete_confirm'
  );
}


/**
 * Delete a configuration
 */
function media_mover_ui_config_delete_confirm_submit($form_id, &$form_state) {
  // load up the configuration so we can easily acess some of its data
  $configuration = media_mover_api_configuration_get($form_state['values']['cid']);
  // run the hook to delete files created by any MM module
  media_mover_api_config_delete_files($configuration->cid);
  // Should we delete files?
  $configuration->delete();

  drupal_set_message('Deleted the configuration.');
  $form_state['redirect'] = 'admin/build/media_mover';
}


/* ************************************************ */
/* Configuration Form Helper functions              */
/* ************************************************ */

/**
 * Helper function to build a select list from the actions that
 * are currently on the system.
 * @param $type
 *   kind of actions to return.
 * @return array
 */
function media_mover_ui_configuration_form_select_builder($type) {
  $return = array();
  $return[0] = t('Please choose an option');
  // loop through the actions to build a nice array of options
  if ($actions = media_mover_api_actions_get($type)) {
    foreach ($actions as $action) {
      $return[$action['module'] . "--" . $action['action_id']] = $action['description'];
    }
  }
  return $return;
}


/**
 * Provides a list of all
 *
 * @TODO placeholder for now
 * @param $type
 * @return unknown_type
 */
function media_mover_ui_steps_select_get($type = NULL) {

}


/* ****************************************** */
/* Configuration viewing                      */
/* ****************************************** */


/**
 * Creates the landing page for an individual configuration
 *
 * @TODO make this function output to a template
 * @param int $cid
 *   media mover configuration id
 * @return string html
 */
function media_mover_ui_configuration_view($cid) {
  // load the configuration
  $configuration = media_mover_api_configuration_get($cid);
  drupal_set_title($configuration->name);
  // Create the list of actions you can take with this configuration
  $links = array(
    l(t('Edit configuration'), "admin/build/media_mover/configuration/$cid/edit"),
    l(t('View files'), "admin/build/media_mover/configuration/$cid/files"),
    l(t('Run configuration'), "admin/build/media_mover/configuration/$cid/run"),
    l(t('Export configuration'), "admin/build/media_mover/export/". $cid),
    l(t('Reset all step statuses'), "admin/build/media_mover/configuration/$cid/steps_reset"),
    l(t('Disable configuration'), "admin/build/media_mover/configuration/$cid/status/". MMA_CONFIG_STATUS_DISABLED),
    l(t('Purge files created by this configuration'), "admin/build/media_mover/configuration/$cid/empty"),
    l(t('Delete configuration'), "admin/build/media_mover/configuration/$cid/delete"),
    l(t('Clone configuration'), "admin/build/media_mover/configuration/$cid/clone"),
  );
  $description[] = theme('item_list', $links, NULL, 'ul', array('style' => 'float: right'));

  // Create the description area for this configuration
  $description[] = '<div style="float:left;">' . $configuration->description;

  if ($configuration->steps) {
    $header = array(t('Step'), t('Name'), t('Status'));
    $rows = array();
    foreach ($configuration->steps as $step) {
      // Status for each step
      $rows[] = array($step->step_order + 1, $step->description, $step->status);
    }
    $description[] = theme('table', $header, $rows);
  }

  // get the file count
  $description[] = t('!count files harvested by this configuration', array('!count' => $configuration->file_count()));

  // get the in process file count
  if ($process_count = $configuration->file_count(MMA_FILE_STATUS_LOCKED)) {
    $description[] = t('!count files are currently being processed by this configuration', array('!count' => $process_count));
  }

  // get a list of all the modules for this configuration
  foreach ($configuration->steps as $step) {
    $modules[] = $step->module . ': ' . $step->description;
  }
  $description[] = '<p>' . t('This configuration implements: ') . theme('item_list', $modules) . '</p>';
  $description[] = '</div>';
  $description = implode('<p>', $description);
  return $description;
}


/**
 * Utility function to get action data for the action_choice
 *
 * @param array $step_action_choice
 */
function media_mover_ui_form_step_action($step_action_choice) {
  // Get the parameters for the new step being added
  list ($module, $action) = explode(MMA_FORM_DELIMETER, $step_action_choice);
  if ($action_data = media_mover_api_actions_get(null, $module, $action)) {
    return $action_data;
  }
}


/* ****************************************** */
/* Configuration operations                   */
/* ****************************************** */

/**
 * Landing page for running a configuration
 * @param $cid
 *   int, configuration id
 * @return string
 */
function media_mover_ui_configuration_run($cid) {
  $configuration = media_mover_api_configuration_get($cid);
  $configuration->run();
  if ($messages = $configuration->messages) {
    return theme('table', array(t('Type'), t('Message')), $messages);
  }
  return t('Configuration run');
}


/**
 * Utility function to set status of a media mover configuration
 *
 * @param $cid
 *   String, a media mover configuration id
 * @param $status
 *   String, status to set the configuration to
 */
function media_mover_ui_configuration_status_change($cid, $status) {
  if (! $status) {
    drupal_set_message(t('No new status was provided for the configuration.'), 'error');
    return;
  }
  // Load the configuration
  $configuration = media_mover_api_configuration_get($cid);
  // Set the new status
  $configuration->status = $status;
  // Save it
  $configuration->save();
  drupal_set_message(t('Status has been updated.'));
  // Return user to referrer
  drupal_goto(referer_uri());
}


/**
 * Resets all the steps in a configuration
 * @param unknown_type $cid
 * @return unknown_type
 */
function media_mover_ui_config_steps_reset($cid) {
  $configuration = media_mover_api_configuration_get($cid);
  $configuration->steps_reset();
  drupal_set_message(t('All steps statuses have been reset'));
  drupal_goto('admin/build/media_mover/configuration/' . $cid .'/view');
}


/**
 * Clone an existing configuration
 * @param $cid
 *   string, configuration id
 */
function media_mover_ui_config_clone($cid) {
  $configuration = media_mover_api_configuration_get($cid);
  $clone = clone $configuration;
  // Increment the machine name
  $clone->cid = media_mover_api_machine_name_create($clone->cid);
  $clone->name = $clone->name . ' ' . t('new');
  // All steps need to have their machine names changed to allow
  // for all step editing
  foreach ($clone->steps as $step) {
    $step->sid = media_mover_api_machine_name_create($step->sid, 'step');
  }
  $clone->save();
  drupal_set_message(t('Configuration has been cloned'));
  drupal_goto('admin/build/media_mover/configuration/' . $clone->cid . '/edit');
}


/* ****************************************** */
/* Step operations                            */
/* ****************************************** */


/**
 * Displays all steps in the system
 * @return string
 */
function media_mover_ui_steps_view() {
  if (! $steps = media_mover_api_steps_get()) {
    return t('There are no steps in the system');
  }

  $header = array(
    t('Step name'),
    t('Machine name'),
    t('Edit step'),
    t('Delete step'),
  );

  $rows = array();

  foreach ($steps as $step) {
    $row = array(
      $step->name,
      $step->sid,
      l(t('Edit'), 'admin/build/media_mover/' . $step->sid . '/edit'),
      l(t('Delete'), 'admin/build/media_mover/' . $step->sid . '/delete'),
    );
    $rows[] = $row;
  }

  return theme('table', $header, $rows);
}


/* ****************************************** */
/* File operations                            */
/* ****************************************** */


/**
 * Displays files associated with configuration
 * @param $cid
 *   int, configuration id
 * @return unknown_type
 */
function media_mover_ui_files_list($cid = FALSE) {
  if ($cid) {
    $results = pager_query("SELECT mmfid FROM {media_mover_files} WHERE cid = '" . check_plain($cid) . "' ORDER BY mmfid DESC");
  }
  else {
    $results = pager_query("SELECT mmfid FROM {media_mover_files} ORDER BY mmfid DESC");
  }
  while ($result = db_fetch_array($results)) {
    $mmfile = media_mover_api_file_get($result['mmfid']);
    $rows[] = array(
      l($mmfile->mmfid, 'admin/content/media_mover/files/' . $mmfile->mmfid),
      $mmfile->nid ? l($mmfile->nid, 'node/' . $mmfile->nid) : t('NA'),
      $mmfile->filepath_in,
      $mmfile->filepath,
      $mmfile->status,
      format_date($mmfile->date),
    );
  }
  $header = array(t('mmfid'), t('Node'), t('Harvested file'), t('Current file'), t('Current step'), t('Timestamp'));
  return theme('table', $header, $rows) . theme('pager');
}


/* *********************************** */

/**
 * Placeholder function for the tests landing page
 * @return unknown_type
 */
function media_mover_ui_tests() {
  $output = t('Some Media Mover modules offer tests that you can use to confirm the functionality of your system.');
  return $output;
}