<?php

// $Id: mm_export.module,v 1.1.2.5 2010/06/09 11:54:12 arthuregg Exp $

/**
 * @file
 * Export module
 */


/**
 * Implementation of hook_menu().
 */
function mm_export_menu() {
  $items['admin/build/media_mover/tools/import'] = array(
    'title' => 'Import Step',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mm_export_import'),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/media_mover/tools/export/configuration'] = array(
    'title' => 'Export Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mm_export_export_configuration', 7),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/media_mover/tools/export/step'] = array(
    'title' => 'Export Step',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_mover_api_export_step', 7),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


/**
 * Export a configuration and display it in a form.
 */
function mm_export_export_configuration(&$form_state, $cid) {
  // If a configuration is passed, show it
  if (! $cid = $form_state['values']['cid']) {
    if (! $cid) {
      // Get all configurations
      if (! $configurations = media_mover_api_configurations_get()) {
        drupal_set_message(t('There are no configurations in the system to export'), 'error');
        return array();
      }

      foreach ($configurations as $configuration) {
        $options[$configuration->cid] = $configuration->name;
      }
      $form['cid'] = array(
        '#title' => t('Chose the configuration to export'),
        '#type' => 'select',
        '#options' => $options,
      );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Export'),
      );
      return $form;
    }
  }
  else {
    $configuration = media_mover_api_configuration_get($cid);
    drupal_set_title(check_plain($configuration->description));
    $code = mm_export_export_media_mover_configurations($configuration);
    $lines = substr_count($code, "\n");
    $form['export'] = array(
      '#title' => t('Export data'),
      '#type' => 'textarea',
      '#value' => $code,
      '#rows' => $lines,
      '#description' => t('Copy the export text and paste it into another configuration using the import function.'),
    );
    return $form;
  }
}


/**
 * Submit function for the configuration export
 *
 * @param $form
 * @param $form_state
 */
function mm_export_export_configuration_submit(&$form, &$form_state) {
  if ($cid = $form_state['values']['configuration']) {
    $form_state['storage']['cid'] == $cid;
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Ctools export callback - Export a configuration.
 */
function mm_export_export_media_mover_configurations($configuration, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('media_mover_configurations', $configuration, $indent, $identifier = 'configuration');
  foreach ($configuration->steps as $step) {
    // Add the sid mappings from the media_mover_step_map table
    $output .= '  $configuration->step_map[] = array( \'sid\' => \'' . $step->sid . '\', \'step_order\' => ' . $step->step_order . ");\n";
  }
  return $output;
}


/**
 * Ctools export callback - Export a step.
 */
function media_mover_api_export_media_mover_steps($obj, $indent = '') {
  ctools_include('export');
  $obj = mm_export_step_load($obj->sid);
  $output = ctools_export_object('media_mover_steps', $obj, $indent, $identifier = 'step');
  return $output;
}


/**
 * Load a single configuration.
 */
function mm_export_configuration_load($cid) {
  ctools_include('export');
  $result = ctools_export_load_object('media_mover_configurations', 'names', array($cid));
  if (isset($result[$cid])) {
    return $result[$cid];
  }
}


/**
 * Load a single step.
 */
function mm_export_step_load($sid) {
  ctools_include('export');
  $result = ctools_export_load_object('media_mover_steps', 'names', array($sid));
  if (isset($result[$sid])) {
    return $result[$sid];
  }
}



/**
 * Implementation of hook_features_export()
 */
function media_mover_configurations_features_export($data, &$export, $module_name = '') {
  // Add media mover api dependency
  $export['dependencies'][] = 'media_mover_api';
  foreach ($data as $cid) {
    $export['features']['media_mover_configurations'][] = $cid;
    // Load the configuration
    $configuration = media_mover_api_configuration_get($cid);
    // Get steps for this config and add them to the export.
    foreach ($configuration->steps as $step) {
      $export['features']['media_mover_steps'][] = $step->sid;
      // Get module dependencies for the step.
      $module = mm_export_step_dependencies($step->sid);
      if (!in_array($module, $export['dependencies'])) {
        $export['dependencies'][] = $module;
      }
    }
  }

  // Pass the export on to ctools for further dependency checking
  return array('ctools' => array('media_mover_configurations', 'media_mover_steps'));
}


/**
 * Implementation of hook_features_export()
 */
function media_mover_steps_features_export($data, &$export, $module_name = '') {
  // Get steps for this configs and their module dependencies.
  foreach ($data as $sid) {
    $export['features']['media_mover_steps'][] = $sid;
    $module = mm_export_step_dependencies($sid);
    if (! in_array($module, $export['dependencies'])) {
      $export['dependencies'][] = $module;
    }
  }
  // Pass the export on to ctools for further dependency checking
  return array('ctools' => array('media_mover_steps'));
}


/**
 * Utility function to get dependencies for the step
 * @param $sid
 *   String, step id
 * @return
 *   String, module name
 */
function mm_export_step_dependencies($sid) {
  ctools_include('export');
  $result = ctools_export_load_object('media_mover_steps', 'names', array($sid));
  return $result[$sid]->module;
}