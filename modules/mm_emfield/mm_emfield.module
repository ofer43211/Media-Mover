<?php
// $Id: mm_emfield.module,v 1.1.2.2 2010/04/20 21:29:03 arthuregg Exp $

/**
 * @file
 * This file contains the integration between Media Mover and Emfield
 * Options for harvesting from and storing to are provided
 */


/**
 * Implementation of hook_media_mover().
 *
 * @return array
 */
function mm_emfield_media_mover() {
  $items = array();
  $items['mm_emfield_harvest'] = array(
    'description' => t('Harvest data from an Embedded Media Field'),
    'callback' => 'mm_emfield_harvest',
    'configuration' => 'mm_emfield_config_harvest',
    'harvest' => TRUE,
  );
  $items['mm_emfield_store'] = array(
    'description' => t('Save data in an Embedded Media Field'),
    'callback' => 'mm_emfield_node_save',
    'configuration' => 'mm_emfield_config_save_node',
    'delete' => 'mm_emfield_node_file_delete',
  );
  return $items;
}


/**
 * Media Mover: Media Mover hook functions
 */

/**
 * Harvest configuration form
 *
 * @param $step
 *   Object, Media Mover step
 */
function mm_emfield_config_harvest($step) {
  $form = array();
  $form['mm_emfield_harvest_conf'] = array(
    '#type' => 'fieldset',
    '#title' => t('Harvest Configuration'),
    '#description' => t('This module harvests files attached to an Embedded Media Field'),
  );
  // Get content types
  if ($types = node_get_types()) {
    foreach ($types as $type) {
      $options[$type->type] = $type->name;
    }
  }
  $form['mm_emfield_harvest_conf']['mm_emfield_harvest_node_type'] = array(
    '#title' => t('Select content types to harvest from'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $step->settings['mm_emfield_harvest_node_type'],
    '#description' => t('Choose which content types to harvest from.'),
  );
  $form['mm_emfield_harvest_conf']['mm_config_harvest_field'] = array(
    '#type' => 'select',
    '#multiple' => true,
    '#title' => t('Select files from these Embedded Media Fields'),
    '#description' => t('Select the Embedded Media Fields to harvest files from.'),
    '#options' => mm_emfield_fields(),
    '#default_value' => $step->settings['mm_config_harvest_field'],
  );

  return $form;
}


/**
 * Emfield storage configruation
 *
 * @param $step
 *   Object, Media Mover step
 * @return $form
 */
function mm_emfield_config_save_node($step) {
  $form = array();
  $form['mm_emfield_storage'] = array(
    '#type' => 'fieldset',
    '#title' => t('Emfield Storage'),
    '#description' => t('This module saves data to an Embedded Media Field'),
    '#collapsed' => false,
  );

  // Add the $action extension to keep name spacing.
  $form['mm_emfield_storage']['mm_emfield_field_save'] = array(
    '#type' => 'select',
    '#title' => t('Save the file to this Embedded Media Field'),
    '#description' => t('Select the Embedded Media Field to save files to. There must be incoming node data for this to function correctly.'),
    '#options' => mm_emfield_fields(),
    '#default_value' => $step->settings['mm_emfield_field_save'],
  );
  $form['mm_emfield_storage']['mm_emfield_new_node'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create new node with data'),
    '#description' => t('Create a new node with the data that was harvested.'),
    '#default_value' => isset($step->settings['mm_emfield_new_node']) ? $step->settings['mm_emfield_new_node'] : FALSE,
  );

  // ----------------------------------
  // Node creation options
  $form['mm_emfield_storage']['node_create'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node creation options'),
    '#collapsed' => isset($step->settings['mm_emfield_new_node']) ? FALSE : TRUE,
    '#collapsible' => TRUE,
    '#description' => t('When creating a new node, these options will be used'),
  );

  // Get content types.
  if ($types = node_get_types()) {
    foreach ($types as $type) {
      $options[$type->type] = $type->name;
    }
  }
  $form['mm_emfield_storage']['node_create']['mm_emfield_save_type'] = array(
    '#title' => t('Save node as type'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $step->settings['mm_emfield_save_type'],
    '#description' => t('Save the harvested and processed data as this node type'),
  );
  $form['mm_emfield_storage']['node_create']['mm_emfield_save_author'] = array(
    '#type' => 'textfield',
    '#title' => t('Default author'),
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => isset($step->settings['mm_emfield_save_author']) ? $step->settings['mm_emfield_save_author']  : t('Anonymous'),
    '#description' => t('If a user is not passed in, this will be the default author.'),
  );
  $form['mm_emfield_storage']['node_create']['mm_emfield_title_default'] = array(
    '#type' => 'textfield',
    '#title' => t('Default title'),
    '#maxlength' => 60,
    '#default_value' => $step->settings['mm_emfield_title_default'],
    '#description' => t('If a title is not passed in, this will be the default node title. If left blank and there is no title information, the file name will be used.'),
  );
  $form['mm_emfield_storage']['node_create']['mm_emfield_body_default'] = array(
    '#type' => 'textarea',
    '#title' => t('Default body'),
    '#default_value' => $step->settings['mm_emfield_body_default'],
    '#description' => t('If a body is not passed in, this will be the default node body.'),
  );
  $form['mm_emfield_storage']['node_create']['mm_emfield_save_options'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node options'),
    '#options' => array(
      'comment' => t('Enable comments'),
      'status' => t('Published'),
      'promote' => t('Promoted to front page'),
      'sticky' => t('Sticky at the top of lists'),
    ),
    '#default_value' => isset($step->settings['mm_emfield_save_options']) ? $step->settings['mm_emfield_save_options'] : array(),
  );

  // Language options.
  if (module_exists('locale')) {
    $options = locale_language_list();
    $form['mm_emfield_storage']['node_create']['mm_emfield_save_language'] = array(
      '#type' => 'select',
      '#title' => t('Save node in language'),
      '#description' => t('Save the node in this language when creating it'),
      '#options' => $options,
      '#default_value' => $step->settings['mm_emfield_save_language'],
    );
  }

  $form['mm_emfield_storage']['mm_emfield_file_source_delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete source material'),
    '#description' => t('The source material will be deleted. CAUTION: this will forever remove uploaded content. Use at your own risk'),
    '#default_value' => isset($step->settings['mm_emfield_file_source_delete']) ? $step->settings['mm_emfield_file_source_delete'] : FALSE,
  );

  return $form;
}

/**
 * Harvest files from an Embedded Media Field
 * @param array $configuration
 *   The configuration array.
 * @param int $nid
 *   Node id if a single node is being processed.
 * @return array
 */
function mm_emfield_harvest($step) {
  $files = array();
  $fields = content_fields();

  $harvest_conditions = '';
  // Are we harvesting from a specific NID ?
  if ($nid = $step->parameters['nid']) {
    $harvest_conditions = ' AND n.nid = '. $nid;
  }

  // We need to harvest from each field that was selected.
  foreach ($step->settings['mm_config_harvest_field'] as $field_name) {
    // Get the relevant database information for this field.
    $db_info = content_database_info($fields[$field_name]);

    $results = db_query("SELECT c.". $field_name ."_embed AS harvest_file, n.nid
      FROM {". $db_info['table'] ."} c
      LEFT JOIN {node} n ON c.nid = n.nid
      LEFT JOIN {media_mover_files} m ON m.cid = %d
      WHERE ((n.nid IS NOT NULL AND m.nid IS NULL)
        OR (n.nid IS NOT NULL AND n.nid = m.nid AND c.". $field_name ."_embed <> m.harvest_file))
        AND n.type = \"%s\"
        AND c.". $field_name ."_embed NOT IN (SELECT harvest_file FROM {media_mover_files} WHERE cid = %d)
        AND n.created >= %d
      ORDER BY n.created
      ", $step->cid, $step->settings['mm_emfield_harvest_node_type'], $step->cid, $job->stop_time);

      // Now build the outgoing file data.
      while ($result = db_fetch_array($results)) {
        $files[] = $result;
      }
  }
  return $files;
}

/**
 * Save to the Embedded Media Field
 * @param array $configuration
 *   the configuration array
 * @param array $file
 *   media mover file array
 * @return string
 *   new file location
 */
function mm_emfield_node_save($step, &$file) {
  // Is there a node attached to this file?
  if ($node = $file->node_get() ) {
    // Get CCK content.
    content_load($node);
  }

  // Get the field that we will save to.
  $field = content_fields($step->settings['mm_emfield_field_save']);

  // We have to have a provided file so emfield does not die.
  // @TODO PHP Stream Wrappers should address this in d7.
  if (! $item = mm_emfield_parse_url($file, $field)) {
    watchdog('MM Emfield', 'Failed to parse %url for provider media to attach to the Embedded Media Field for !file.', array('%url' => $file->filepath, '!file' => l(t('MM file @file', array('@file' => $file->mmfid)),  'admin/media_mover/file/edit/'. $file->mmfid)), WATCHDOG_ERROR);
    return $url;
  }

  // If the admin requested that source material be deleted, delete it now. DANGER CAKES!
  // Note that we only do this if the current file path is NOT the source material.
  if ($step->settings['mm_emfield_file_source_delete'] && $file->filepath != $file->filepath_in) {
    file_delete($file->filepath);
    watchdog('MM Emfield', 'Deleted source material %file', array(
      '%file' => $file->filepath,
    ), WATCHDOG_INFO, 'node/' . $node->nid);
  }

  // Is there a node attached to the $file array and we are not supposed to create a new node?
  if (! $node && ! $step->settings['mm_emfield_new_node']) {
    // Set an alert.
    watchdog('MM Emfield', 'No node data was passed for storing file data in a specified Embedded Media Field: !file',
      array('!file' => l(t('MM file @file', array('@file' => $file->mmfid)), 'admin/media_mover/file/edit/'. $file->mmfid)), WATCHDOG_ERROR);
    // We can not save the file; exit.
    return;
  }

  // Should we start building a new node?
  if ($step->settings['mm_emfield_new_node']) {
    // Start building the node.
    $node = new stdClass();
    // Set node type.
    $node->type = $step->settings['mm_emfield_save_type'];

    // Set the title.
    if (! $node->title = $step->settings['mm_emfield_title_default']) {
      if (! $node->title = $file->data['node']->title) {
        $node->title = basename($url);
      }
    }

    // Set the body, cascade from default to nothing.
    if (! $node->body = $step->settings['mm_emfield_body_default']) {
      if (! $node->body = $file->data['node']->body) {
        $node->body = '';
      }
    }

    // If we have a language setting.
    $node->language = isset($step->settings['mm_emfield_save_language']) ? $step->settings['mm_emfield_save_language'] : null;

    // Node options.
    $node->comment = $step->settings['mm_emfield_save_options']['comment'] ? 2 : 0;
    $node->status = $step->settings['mm_emfield_save_options']['status'] ? 1 : 0;
    $node->sticky = $step->settings['mm_emfield_save_options']['sticky'] ? 1 : 0;
    $node->promote = $step->settings['mm_emfield_save_options']['promote'] ? 1 : 0;

    // Now build the node author.
    if (! $user = $file->data['user']) {
      if (! $user = user_load(array('name' => $step->settings['mm_emfield_save_author']))) {
        $user = user_load(array('uid' => 0));
      }
    }

    // Attach the user data to the node.
    $node->uid = $user->uid;
    $node->name = $user->name;
    $node->mail = $user->mail;
  }

  // Save the node to add the emfield data.
  $node->{$field['field_name']}[0] = $item;

  node_save($node);

  return $file->filepath;
}


/**
 * Return array of content fields for display in configuration forms.
 */
function mm_emfield_fields() {
  $fields = array();
  foreach (content_fields() as $field) {
    if (in_array($field['type'], array('emvideo', 'emimage', 'emaudio'))) {
      $fields[$field['field_name']] = $field['widget']['label'];
    }
  }
  return $fields;
}


/**
 * This is a helper function to find a local file in the files list so that
 * CCK does not die when we try to save the file to it.
 * @param $file
 * @return unknown_type
 */
function mm_emfield_parse_url($file, $field) {
  for ($i = MMA_FILE_STATUS_COMPLETE_COMPLETE; $i >= 0; $i--) {
    if ($url = $file[media_mover_api_verb_base_status($i) .'_file']) {
      if ($url) {
        $item = emfield_parse_embed($field, $url, $field['module']);
        if (!empty($item)) {
          $item['embed'] = $url;
          return $item;
        }
      }
    }
  }
}


/**
 * Delete files associated with this configuration.
 * @TODO should we delete the full node here?
 *
 * @param $configuration
 * @param $file
 * @return unknown_type
 */
function mm_emfield_node_file_delete($step, $file) {
  // Check that this file is associated with a node; otherwise we cannot do
  // anything.
  if (! $nid = $file->nid) {
    return;
  }

  // Get all the node data.
  $node = node_load($nid);
  content_load($node);

  // Build the name of the field that we are looking for
  $field = $step->settings['mm_emfield_field_save'];

  // Make sure that this field exists on the node
  if (! $node->{$field}) {
  	return;
  }

  // If we have a url, we can just delete that media and save the node.
  if ($url = $file->filepath) {
    // We need to look at the files stored in this field to find the url.
    foreach ($node->{$field} as $key => $node_field) {
      // Is this the file that we are looking for?
      if ($node_field['embed'] == $url) {
        // Remove the file from the node
        unset($node->{$field}[$key]);
        // Save the node without the file
        node_save($node);
        watchdog('MM Emfield', 'Deleted media attached to an Embedded Media Field for !node', array('!node' => l($node->title, 'node/'. $node->nid)), WATCHDOG_INFO);
      }
    }
  }
}
