<?php

// $Id: mm_cck.module,v 1.1.2.10 2010/07/18 21:20:31 msonnabaum Exp $

/**
 * @file
 * This file contains the integration between Media Mover and CCK
 * Options for harvesting from and storing to are provided
 */


/**
 * Implements hook_media_mover().
 */
function mm_cck_media_mover() {
  $items = array();
  $items['mm_cck_harvest'] = array(
    'description' => t('Harvest from a CCK field'),
    'callback' => 'mm_cck_harvest',
    'configuration' => 'mm_cck_config_harvest',
    'harvest' => TRUE,
  );
  $items['mm_cck_store'] = array(
    'description' => t('Save data in a CCK field'),
    'callback' => 'mm_cck_node_save',
    'configuration' => 'mm_cck_config_save_node',
  );
  return $items;
}


/**
 * Return the configuration form for harvesting from CCK fields
 *
 * @pram $step
 *   object, media mover step
 * @return array, drupal form array
 */
function mm_cck_config_harvest($step) {
  $form = array();
  $form['mm_harvest_conf'] = array(
    '#type' => 'fieldset',
    '#title' => t('Harvest Configuration'),
    '#description' => t('This module harvests files attached to a CCK field'),
  );
  $form['mm_harvest_conf']['mm_config_harvest_field'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Select files from these CCK fields'),
    '#description' => t('Select the CCK fields to harvest files from.'),
    '#options' => mm_cck_fields(),
    '#default_value' => isset($step->settings['mm_config_harvest_field']) ? $step->settings['mm_config_harvest_field'] : '',
  );
  $form['mm_harvest_conf']['file_types'] = array(
    '#title' => t('File types'),
    '#type' => 'textfield',
    '#default_value' => isset($step->settings['file_types']) ? $step->settings['file_types'] : 'avi mov wmv mpeg mp4 mpeg2 dv 3gp 3g2 mpeg4',
    '#description' => t('Space separated list of file types that can be harvested. These are file extensions and are values like "avi mov wmv mpeg mp4 mpeg2 dv".'),
  );
  return $form;
}


/**
 * Return the configuration form for saving to CCK fields
 * @param $step
 *   object, media mover step
 * @return array
 */
function mm_cck_config_save_node($step) {
  $form = array();
  $form['storage'] = array(
    '#type' => 'fieldset',
    '#title' => t('CCK Save Configuration'),
    '#description' => t('This module saves data to a CCK field'),
    '#collapsed' => FALSE,
  );
  // add the $action extension to keep name spacing
  $form['storage']['cck_field_save_node'] = array(
    '#type' => 'select',
    '#title' => t('Save the file to this CCK field'),
    '#description' => t('Select the CCK field to save files to. There must be incoming node data for this to function correctly.'),
    '#options' => mm_cck_fields(),
    '#default_value' => $step->settings['cck_field_save_node'],
  );
  $form['storage']['field_save_list'] = array(
    '#type' => 'checkbox',
    '#title' => t('List File'),
    '#description' => t('List file automatically on the node.'),
    '#default_value' => $step->settings['field_save_list'] ? $step->settings['field_save_list'] : 0,
  );
  return $form;
}


/**
 * Harvest files from a CCK field
 * @param array $config
 *   the configuration array
 * @param array $running_config
 *   the full configuration object that is running
 * @param int $nid
 *   node id if a single node is being processed
 * @return array
 */
function mm_cck_harvest($step) {
  $files = array();
  $fields = content_fields();

  $harvest_conditions = '';

  // Are we harvesting from a specific NID ?
  if (isset($step->parameters['nid'])) {
    $harvest_conditions = ' AND n.nid = '.  $step->parameters['nid'];
  }

  // we need to harvest from each field that was selected
  foreach ($step->settings['mm_config_harvest_field'] as $field_name) {
    // get the relevant database information for this field
    $db_info = content_database_info($fields[$field_name]);

    // change the query based on field type
    switch ($fields[$field_name]['type']) {
      case 'text':
        //$node->{$field['field_name']} = array(array('value' => $file['process_file']));
      break;

      // handle image field case
      case 'filefield':
      case 'image':
        // are file types being checked?
        if ($step->settings['file_types']) {
          $types = explode(' ', $step->settings['file_types'] );
          foreach ($types as $type) {
            $conditions[] = "f.filepath LIKE '%%.$type%'";
          }
          // build the SQL to check against the file types
          $file_type_conditions = ' AND ('. implode(' OR ', $conditions) .')';
        }

        $results = db_query('SELECT f.filepath AS filepath, n.nid, f.fid FROM {files} f
          LEFT JOIN {'. $db_info['table'] .'} c ON c.'. $db_info['columns']['fid']['column'] .' = f.fid
          LEFT JOIN {node} n ON c.nid = n.nid
          LEFT JOIN {media_mover_files} m ON m.fid = f.fid AND m.cid = %d
          WHERE  (n.nid IS NOT NULL AND m.nid IS NULL) OR
            (n.nid IS NOT NULL AND n.nid = m.nid AND f.filepath <> m.filepath_in)
            '. $file_type_conditions .'
            AND f.filepath NOT IN (select filepath_in from {media_mover_files} where cid =%d)
          ORDER BY f.timestamp',
          $step->cid, $configuration['mm_cck_havest_node_type'], $step->cid);

        // now build the out going file data
        while ($result = db_fetch_array($results)) {
          $files[] = $result;
        }
      break;
    }
  }
  return $files;
}


/**
 * Save to the CCK field
 * @param int $action
 *   action id that is being run
 * @param array $configuration
 *   the configuration array
 * @param array $file
 *   media mover file array
 * @return string
 *   new file location
 */
function mm_cck_node_save($action, $configuration, $file) {
  // is there a node attached to the $file array?
  if (! $node = $file->node_get()) {
    // set an alert
    watchdog('Media Mover CCK', 'No node data was passed for storing file data in a specified CCK field: !file',
      array('!file', l(t($file['mmfid']),  'admin/media_mover/file/edit/'. $file['mmfid'])), WATCHDOG_ERROR);
    // we can not save the file; exit
    return;
  }

  // Load CCK data
  content_load();

  // get the field that we are using
  $field = content_fields($configuration['mm_cck_field_save_'. $action]);
  switch ($field['type']) {
    case 'text':
      // @TODO this is likely wrong
      $node->{$field['field_name']} = array(array('value' => $file_path));
      // save the node
      node_save($node);
      // clear the cache
      cache_clear_all('content:'. $node->nid .':'. $node->vid, 'cache_content');
      $file['filepath'] = $file_path;
    break;

    // handle CCK image and CCK file field cases
    case 'image':
    case 'filefield':
      if (! $file = mm_cck_field_filefield($node, $field, $file->filepath, $configuration)) {
        return;
      }
    break;
  }

  // return the file
  return $file['filepath'];
}


/**
 * Helper function to map file to CCK file fields
 * @param array $node
 *   Drupal node object
 * @param array $field
 *   CCK field array
 * @param string $file_path
 *   The file path
 * @param array $configuration
 * @return array
 */
function mm_cck_field_filefield(&$node, $field, $file_path, $configuration) {
  // is there a specified directory to use with this field?
  $destination_path = mm_cck_field_widget_files_directory($field);

  // get the validators for this field
  if ($field['type'] == 'image') {
    $validators = array_merge(filefield_widget_upload_validators($field), imagefield_widget_upload_validators($field));
  }
  else { $validators =  filefield_widget_upload_validators($field);}

  // now get the new field
  if (! $file = field_file_save_file($file_path, $validators, $destination_path)) {
    watchdog('MM Content', 'Could not save file', NULL, WATCHDOG_ERROR);
    return;
  }

  // we need to alter the file object slightly so it will display correctly
  $file['data'] = array('description' => '');
  // do we list the file?
  $file['list'] = $configuration['field_save_list'];

  // add the file on to the node
  // @TODO not sure if the 0 is correct, see: http://drupal.org/node/532170
  $node->{$field['field_name']}[0] = $file;
  // save the node
  node_save($node);
  // clear the cache
  cache_clear_all('content:'. $node->nid .':'. $node->vid, 'cache_content');
  return $file;
}


/**
 * Create a destination path
 * @param $field
 * @return unknown_type
 */
function mm_cck_field_widget_files_directory($field) {
  $widget_file_path = $field['widget']['file_path'];
  if (module_exists('token')) {
    global $user;
    $widget_file_path = token_replace($widget_file_path, 'user', $user);
  }
  return file_directory_path() .'/'. $widget_file_path;
}


/**
 * Return array of content fields for display in configuration forms.
 */
function mm_cck_fields() {
  $fields = array();
  foreach (content_fields() as $field) {
    $fields[$field['field_name']] = $field['widget']['label'];
  }
  return $fields;
}
