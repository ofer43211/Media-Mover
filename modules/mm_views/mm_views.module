<?php

// $Id: mm_views.module,v 1.1.2.3 2010/02/23 06:12:26 arthuregg Exp $;


/* ********************************************** */
/* Contrib Hooks                                  */
/* ********************************************** */

/**
 * Implementation of hook_media_mover().
 * @return array()
 */
function mm_views_media_mover() {
  $items = array();
  $items['mm_views_harvest'] = array(
    'description' => t('Select files from views'),
    'configuration' => 'mm_views_harvest_config',
    'callback' => 'mm_views_harvest',
    'harvest' => TRUE,
  );
  return $items;
}


/**
 * configuration options for harvesting from a view
 * @param $settings
 * @return array
 */
function mm_views_config($step) {
  $form['views_config'] = array(
    '#type' => 'markup',
    '#title' => t('Select files from a view'),
  );

  // get a list of views
  foreach (views_get_all_views() as $name => $view) {
    $views[$name] = $view->name;
  }
  $form['views_config']['view'] = array(
    '#type' => 'select',
    '#title' => t('Select view'),
    '#options' => $views,
    '#default_value' => $step->settings['view'],
    '#description' => t('Choose a view which outputs a list of files.
      Please note, if your view does not return a list of files,
      this harvest will fail.'
    )
  );
  $form['views_config']['stop_time'] = array(
    '#type' => 'checkbox',
    '#title' => t('Constrain file list start time'),
    '#default_value' => $step->settings['stop_time'],
    '#description' => t('You can reduce the number of files considered
      by sending using the last time this configuration was run as the
      start argument for your view. Your view needs to be configured to
      use a unix time stamp as the first view argument.'
    )
  );
  return $form;
}


/**
 * Select files with views
 *
 * @param $settings
 *   array
 * @return array
 */
function mm_views_harvest($step) {
  $files = array();
  // get the featured event
  $view = views_get_view($step->settings['view'], 'default');
  // should we use the last run time as an argument?
  if ($step->settings['stop_time']) {
    // we need to load the configuration to get the stop/start times
    $configuration = media_mover_api_get_configuration($step->settings['cid']);
    if ($start = $step->stop_time) {
      $view->set_arguments(array($start));
    }
  }

  $view->execute_display();

  foreach ($view->result as $result) {
    foreach ($view->field as $id => $field) {
      if ($field->content_field['type'] == 'filefield') {
        $file = field_file_load($result->{$field->field_alias});
        $files[] = array(
          'filepath' => $file['filepath'],
          'fid' => $result->{$field->field_alias},
          'nid' => $result->nid
        );
      }
    }
  }
  return $files;
}


/* *************************************************************** */
/* VIEWS functions */
/* *************************************************************** */

/**
 * define media mover api tables to join
 *
 * @return array of tables
 */
function mm_views_views_tables() {
  $table = views_new_table('media_mover_files', 'internal', 'node', 'nid', 'nid');
  views_table_add_filter($table, 'cid', 'Media Mover: Configuration files', t('This will filter a view to nodes that have files with files generated by this Media Mover configuration.'),
    array(
      'list' => 'views_handler_filter_media_mover_api_list',
      'operator' => array('AND' => t('Has files from all'), 'OR' => t('Has files from any'), 'NOR' => t('Has files from none')),
      'handler' => 'views_handler_filter_media_mover_api_custom',
      'value-type' => 'array',
      'list-type' => 'multiselect',
     )
   );

  $tables[$table['name']] = $table;
  return $tables;
}


/**
 * Builds the config list for views
 * @return array of configurations
 */
function views_handler_filter_media_mover_api_list() {
  // get a list of all configurations
  $results = db_query('SELECT cid, name FROM {media_mover_config_list} ORDER BY cid');
  while ($config = db_fetch_object($results)) {
    $mmconfig[$config->cid] = $config->name;
  }
  return $mmconfig;
}


/**
 * build the joins for the media mover config filter
 *
 * @param string $op
 * @param array $value
 * @param unknown_type $depth
 * @param unknown_type $query
 */
function views_handler_filter_media_mover_api_custom($op, $filter, $filterinfo, &$query) {

  $tablename = $query->get_table_name('media_mover_files', $num);
  $query->add_table($tablename, FALSE, 1, array('left' => array('table' => 'node', 'field' => 'nid'), 'right' => array('field' => 'nid')));

  // build the where clause
  switch ($filter['operator']) {
    case 'OR':
      $clause = "'" . implode("','", $filter['value']) . "'";
      $where = "$tablename.cid IN ($clause)";
      $query->add_where($where);
    break;

    case 'AND':
      foreach ($filter['value'] as $cid) {
        $clause[] = "$tablename.cid = $cid";
      }
      $query->add_where(implode(' AND ', $clause));
    break;

    case 'NOR':
      $clause = "'" . implode("','", $filter['value']) . "'";
      $where = "$tablename.cid NOT IN ($clause)";
      $query->add_where($where);
    break;

    default:
      $query->add_where('');
    break;
  }

}
