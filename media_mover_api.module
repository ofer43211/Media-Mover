<?php

// $Id: media_mover_api.module,v 1.1.2.110.2.47.2.73 2010/09/03 16:36:12 arthuregg Exp $


/*
 * @file
 * This file provides an interface to the media mover objects (configurations, steps, files).
 */

 /**
  * @TODO Document Document Document
  * @TODO Improve harvest ops to declare if they can run on a single node
  * @TODO Add simple tests for API intgrity
  *
  * @TODO rename "steps" "actions" and replace current "action" with "action_id"
  *
  */

require_once('class_media_mover_file.php');
require_once('class_media_mover_step.php');
require_once('class_media_mover_configuration.php');


/* ************************************************ */
/* Definitions */
/* ************************************************ */

// files directory
define('MMA_FILES_DIR', 'media_mover');

// defines the configuration status
define('MMA_CONFIG_STATUS_ENABLED', 'enabled');
define('MMA_CONFIG_STATUS_DISABLED', 'disabled');
define('MMA_CONFIG_STATUS_STOPPED', 'stopped');
define('MMA_CONFIG_STATUS_RUNNING', 'running');

// Define the step status
define('MMA_STEP_STATUS_READY', 'ready');
define('MMA_STEP_STATUS_RUNNING', 'running');
define('MMA_STEP_STATUS_REMOVE', 'remove');

// file status
define('MMA_FILE_STATUS_READY', 'ready');
define('MMA_FILE_STATUS_LOCKED', 'locked');
define('MMA_FILE_STATUS_ERROR', 'error');
define('MMA_FILE_STATUS_FINISHED', 'finished');

define('MMA_ACTION_TYPE_NORMAL', 'normal');
define('MMA_ACTION_TYPE_HARVEST', 'harvest');
define('MMA_ACTION_TYPE_ALL', 'all');

/* ************************************************ */
/* Drupal Hooks                                     */
/* ************************************************ */


/**
 * Implementation of hook_cron().
 * Runs all active configurations
 *
 * @ingroup drupal_hooks
 */
function media_mover_api_cron() {
  // Make sure drupal_queue is included
  drupal_queue_include();
  // Grab active configurations
  $configurations = media_mover_api_configurations_get(MMA_CONFIG_STATUS_ENABLED);
  // Add harvest items to the queue
  $harvest_queue = DrupalQueue::get('media_mover_api_queue_harvest');
  $file_queue = DrupalQueue::get('media_mover_api_configuration_process');
  foreach ($configurations as $configuration) {
    // Add the harvest step to the queue
    $harvest_queue->createItem($configuration);
    // Find files ready for process
    $files = $configuration->get_files(MMA_FILE_STATUS_READY);
    foreach ($files as $file) {
      $file->lock();
      $file_queue->createItem($file);
    }
  }
}


/**
 * Implementation of hook_cron_queue_info().
 */
function media_mover_api_cron_queue_info() {
  $queues['media_mover_api_configuration_process'] = array(
    'worker callback' => 'media_mover_api_queue_file_process_worker',
    'time' => variable_get('media_mover_api_queue_file_process_worker_time', 6000)
  );
  $queues['media_mover_api_queue_harvest'] = array(
    'worker callback' => 'media_mover_api_queue_harvest_worker',
    'time' => variable_get('media_mover_api_queue_harvest_worker_time', 60)
  );
  $queues['media_mover_api_queue_file_delete'] = array(
    'worker callback' => 'media_mover_api_queue_file_delete_worker',
    'time' => variable_get('media_mover_api_queue_file_delete_worker_time', 60)
  );
  return $queues;
}


/**
 * Implementation of hook_flush_caches
 *
 * @ingroup drupal_hooks
 * @return array
 */
function media_mover_api_flush_caches() {
  return array('cache_media_mover');
}


/**
 * Implementation of hook_enable().
 * Everytime that a module is enabled, look for new configurations
 * and steps that are defined.
 *
 * @ingroup drupal_hooks
 */
function media_mover_api_enable() {
  // Fire hook_media_mover_define_configurations
  // Load any steps that are provided by other modules
  if ($code_based = module_invoke_all('media_mover_define_configurations')) {
    foreach ($code_based as $code_configuration) {
      // Check to see if this step is in the database already
      $name = md5($code_configuration->name);
      $result = db_query("SELECT cid FROM {media_mover_configurations} WHERE MD5(name) = '%s'", $name);
      if (! $result) {
        $configuration = new media_mover_configuration();
        foreach ($code_configuration as $key => $value) {
          $configuration->{$key} = $value;
        }
        // Keep track of this being a code based configuration
        $configuration->settings['default'] = TRUE;
        $configuration->save();
      }
    }
  }

  // Fire hook_media_mover_define_steps
  // Load any steps that are provided by other modules
  if ($code_based = module_invoke_all('media_mover_define_steps')) {
    foreach ($code_based as $code_step) {
      // Check to see if this step is in the database already
      $name = md5($code_step->name);
      $result = db_query("SELECT sid FROM {media_mover_steps} WHERE MD5(name) = '%s'", $name);
      if (! $result) {
        $step = new media_mover_step();
        foreach ($code_step as $key => $value) {
          $step->{$key} = $value;
        }
        // Keep track of this being a code based step
        $step->settings['default'] = TRUE;
        $step->save();
      }
    }
  }
}


/**
 * Implementation of hook_disable().
 * Everytime that a module is disabled, look for configurations
 * and steps that should be disabled.
 *
 * @ingroup drupal_hooks
 */
function media_mover_api_disable() {
  // Get all the code based configurations
  $code_based = module_invoke_all('media_mover_define_configurations');
  // Key them by a hash of the name
  foreach ($code_based as $code_configuration) {
    $configurations[md5($step->name)] = $code_configuration;
  }

  // Get all the media mover configurations
  foreach (media_mover_api_configurations_get() as $configuration) {
    // Check to see this configuration is code based
    if ($configuration->settings['default']) {
      // Does this configuration still exist in an enabled module?
      if (! $configurations[md5($configuraiton->name)]) {
        // Remove it, do not remove any of its files
        $configuration->delete();
      }
    }
  }

  // Get all the code based steps
  $code_based = module_invoke_all('media_mover_define_steps');
  // Key them by a hash of the name
  foreach ($code_based as $code_step) {
    $steps[md5($step->name)] = $code_step;
  }

  // Get all the media mover configurations
  foreach (media_mover_api_steps_get() as $step) {
    // Check to see this configuration is code based
    if ($step->settings['default']) {
      // Does this step still exist in an enabled module?
      if (! $steps[md5($step->name)]) {
        // Remove it, do not remove any of its files
        $step->delete();
      }
    }
  }

}

/* ************************************************ */
/* Media Mover queue workers                        */
/* ************************************************ */


/**
 * Queue worker to process a file
 *
 * @param $file
 *   Object, Media Mover file
 */
function media_mover_api_queue_file_process_worker($file) {
  // Step to execute is one ahead of current file step
  $step_order = $file->step_order++;
  $file->steps[$step_order]->run($file);
}


/**
 * Queue worker for file deletion
 *
 * @param $file
 */
function media_mover_api_queue_file_delete_worker($file) {
  $file->delete();
  // Clear any file caches
  cache_clear_all('media_mover_files_'. $file->mmfid, 'cache_media_mover', TRUE);
}


/**
 * Queue worker function to harvest files
 * @param $configuration
 *   Object, Media Mover configuration object
 */
function media_mover_api_queue_harvest_worker($configuration) {
  $configuration->steps[0]->run();
}


/* ************************************************ */
/* Media Mover internal functions */
/* ************************************************ */

/**
 * Returns the data associated with a specified action, or all
 * actions of a specified type, or all actions.
 *
 * @param $module
 * @param $action_id
 * @param $type
 *   String, one of harvest, normal, both
 * @return unknown_type
 */
function media_mover_api_actions_get($type = MMA_ACTION_TYPE_NORMAL) {
  static $data;

  if (! $data) {
    foreach (module_implements('media_mover') as $module) {
      // Fire the hook to get the list of module actions;
      // parse the actions and put them in a usable format
      if ($actions = module_invoke($module, 'media_mover')) {
        foreach ($actions as $action_id => $action) {
          // Create the unique action id
          $action['action_id'] = $module . '--' . $action_id;
          // Add the module to the data
          $action['module'] = $module;
          // Store this with harvest or normal actions
          $action_type = isset($action['harvest']) ? MMA_ACTION_TYPE_HARVEST : MMA_ACTION_TYPE_NORMAL;
          // Key this by the action type
          $data[$action_type][$module . '--' . $action_id] = $action;
          // we also store the modules by module
          $data[$module][$module . '--' . $action_id] = $action;
        }
      }
    }
  }

  // If specific data has been requested
  if ($request_module && $request_action_id) {
    return $data[$request_module][$request_action_id];
  }

  // Return non harvest data
  if ($type == MMA_ACTION_TYPE_NORMAL) {
    return $data[MMA_ACTION_TYPE_NORMAL];
  }

  if ($type == MMA_ACTION_TYPE_HARVEST) {
    return $data[MMA_ACTION_TYPE_HARVEST];
  }

  if ($type == MMA_ACTION_TYPE_BOTH) {
    return array_merge($data[MMA_ACTION_TYPE_HARVEST], $data[MMA_ACTION_TYPE_NORMAL]);
  }
}


/**
 * Returns all step data in the system, or a specified module/action pair
 *
 * @param $action_id
 *   String, in the form module_name--action_id
 * @return array
 */
function media_mover_api_action_get($action_id) {
  // Get all the actions
  $actions = media_mover_api_actions_get(MMA_ACTION_TYPE_BOTH);
  return $actions[$action_id];
}


/* ************************************************ */
/* Media Mover directory and file functions  */
/* ************************************************ */


/**
 * this is a place holder function so that directory paths
 * can be more flexible in the future without needing to
 * rewrite indidividual modules. Relies on drupal's files
 * path for now. Note, this should produce a path that is
 * executable to the file, relative to drupal. We do not
 * need to store this path.
 *
 * @TODO replace this with standard drupal file handling -
 *       this will make it safe for D7
 * @param $filepath is a file path to check against to return
 *        a good path
 * @param $create
 *   boolean, should the directory be created?
 *
 */
function media_mover_api_dir_path($filepath = NULL, $create = TRUE) {
  // Path is relative to drupal files dir
  $path = file_directory_path() . MMA_FILES_DIR . '/';

  if ($filepath) {
    // Return the full path relative to the drupal files directory
    $return_path = $path . $filepath;

    // Should we create the directory if it does
    if ($create) {

      // Check to see if there is a file extension on the file path and
      // remove the file if it exists
      if (strpos(basename($filepath), '.') !== FALSE ) {
        $filepath = dirname($filepath);
      }
      $directories = array();

      // Get all the directories that we need create
      foreach (explode('/', $filepath) as $directory) {
        // Create the filepath from the list of directories already used
        $create_dir = $path . ($directories ? implode('/', $directories) . '/' : '') . $directory;
        file_check_directory($create_dir, FILE_CREATE_DIRECTORY);
        // Add the new directory onto the path
        $directories[] = $directory;
      }
    }
  }

  return $return_path;
}


/**
 * this is a handler to check file permissions. It lets an admin set
 * global file perms and then the modules don't have to worry about it
 */
function media_mover_api_set_file_perm($filepath) {
  if (variable_get('mma_file_perm', TRUE)) {
    if ($oct = variable_get('mma_file_mask', NULL)) {
      $perms = octdec( $oct);
    }
    else {
      $perms = 0644;
    }
    @chmod($filepath, $perms);
  }
}


/**
 * This is a slight change of the D6 function to make it useful for MM. This
 * checks a file path against a list of file extensions. Returns TRUE if the
 * extension is in the list or if no extensions are passed
 * @param string $filename
 * @param string $extensions
 * @return boolean
 */
function media_mover_api_file_validate_extensions($filename, $extensions = FALSE) {
  if (! $extensions) {
    return TRUE;
  }
  $regex = '/\.('. ereg_replace(' +', '|', preg_quote($extensions)) .')$/i';
  if (preg_match($regex, $filename)) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Generates a unique machine name from a string for a configuration
 * or a step
 * @param unknown_type $name
 * @param unknown_type $type
 * @param $i
 *   Int, itterator
 * @param $configuration
 *   Object, media mover configuration
 * @return unknown_type
 */
function media_mover_api_machine_name_create($id, $type = 'configuration', $i = 0, $configuration = FALSE) {
  // Remove all non-alphanumeric characters from the $name on the first pass
  if (! $i) {
    // Cleanup the id on the first pass
    $id = drupal_strtolower(preg_replace("/[^a-zA-Z0-9_]/", '_', $id));
  }

  $i++;

  // Does this $id exist?
  if (media_mover_api_machine_name_exists($id, $type)) {
    // Increment the $id if it exists
    if (preg_match("/_([0-9]*)$/", $id)) {
      $id = preg_replace("/_([0-9]*)$/", '_' . $i, $id);
    }
    else {
      $id .= '_' . $i;
    }
    // Check to see if this $id exists
    $id = media_mover_api_machine_name_create($id, $type, $i++);
  }
  return $id;
}


/**
 * Helper function to test if the $id exists
 * @param $id
 * @param $type
 * @return boolean
 */
function media_mover_api_machine_name_exists($id, $type = 'configuration') {
  if ($type == 'configuration') {
    $query = 'SELECT COUNT(cid) FROM {media_mover_configurations} WHERE cid = "%s"';
  }
  if ($type == 'step') {
    $query = 'SELECT COUNT(sid) FROM {media_mover_steps} WHERE sid = "%s"';
  }
  // Check for this ID in the database
  if ($result = db_result(db_query($query, $id))) {
    return TRUE;
  }
  return FALSE;
}


/* ****************************************** */
/* MEDIA MOVER FILE FUNCTIONS                 */
/* ****************************************** */

/**
 * returns an array of item statuses or text for status
 * @ingroup media_mover_files
 * @param int $status value of status to return (optional)
 * @return array or string
 */
function media_mover_api_file_status($status = NULL) {
  $states = array(
    MMA_FILE_STATUS_ERROR => t('Error'),
    MMA_FILE_STATUS_READY => t('Ready'),
    MMA_FILE_STATUS_RUNNING => t('Running'),
    MMA_FILE_STATUS_FINISHED => t('Finished'),
  );
  if ($status) {
    return $states[$status];
  }
  return $states;
}


/**
 * Selects all files. Options to select from specific configurations,
 * select by step_id, select by status.
 *
 * @ingroup media_mover_files
 * @param $cid
 *   int, option to select specific configuration
 * @param $sid
 *   int, files in step id
 * @param $status
 *   int, files matching status
 * @param $limit
 *   int, the number of files to get
 * @return is an array of files
 */
function media_mover_api_files_get($cid = FALSE, $sid = FALSE, $limit = FALSE, $status = NULL) {
  $options = array();
  if ($cid) {
    $options[] = "cid = $cid";
  }
  // set the status if requested
  if ($status) {
    $options[] = "status = \"$status\"";
  }
  elseif ($status !== FALSE) {
    $options[] = 'status = "' . MMA_FILE_STATUS_READY . '"';
  }

  // set the step if requested
  if ($sid) {
    $options[] = "sid = $sid";
  }
  if ($options) {
    $options = ' WHERE '. implode(' AND ', $options);
  }

  // set the limit of files selected
  if ($limit) {
    $file_limit = "LIMIT 0, $limit";
  }

  // find all matching files
  $results = db_query("SELECT mmfid FROM {media_mover_files} ". $options . $file_limit);
  // put files into an array
  $items = array();
  while ($result = db_fetch_array($results)) {
    $item = media_mover_api_file_get($result['mmfid'], TRUE);
    $items[] = $item;
  }
  return $items;
}


/**
 * Loads a complete media mover file
 *
 * @ingroup media_mover_files
 * @param $mmfid
 *   Int, media mover file id
 * @param $cache
 *   Boolean, attempt to load from cache
 * @return object
 *   media mover file object
 */
function media_mover_api_file_get($mmfid, $cache = TRUE) {
  static $cached;
  $file = FALSE;
  // Can we use cached files?
  if ($cache && $file = $cached[$mmfid]) {
    return $file;
  }
  // No cache, attempt to load the file
  $file = new media_mover_file($mmfid, $cache);
  if ($file->errors) {
    watchdog('media_mover_api', implode('<br />'), $this->errors, WATCHDOG_ERROR);
    return FALSE;
  }
  // Cache this locally
  if ($cache) {
    $cached[$mmfid] = $file;
  }
  return $file;
}


/**
 * Create a derivative file from the one passed in
 *
 * @param $file
 *   Object, media mover file
 * @param $new_filepath
 *   String, optional for the new filepath
 * @param $status
 *   String, optional new file status
 * @return $new_file
 *   Object, media mover file
 */
function media_mover_api_file_create_derivative($file, $new_filepath = FALSE,  $status = MMA_FILE_STATUS_READY) {
  // Create a copy of the current file that will be the derivative
  $new_mmfile = clone $file;
  // Remove the ID so we can save as a new file
  unset($new_mmfile->mmfid);
  // Store parent id
  $new_mmfile->data['parent'] = $file->mmfid;
  // Do we need to change the filepath?
  if ($new_filepath) {
    $new_mmfile->filepath = $new_filepath;
  }
  // Save the new file with status set for the next step in the process
  $new_mmfile->save(TRUE);
  // Set the new status
  $new_mmfile->status = $status;
  // Updates the status and allows for new operations
  $new_mmfile->unlock();
  return $new_mmfile;
}


/* ******************************************************** */
/* CONFIGURATION functions                                  */
/* ******************************************************** */

/**
 * Get all configurations
 *
 * @ingroup media_mover_configurations
 * @param $status
 *   string, what status configurations to return
 * @return array of configuration objects
 */
function media_mover_api_configurations_get($status = NULL) {
  $configurations = array();
  // if status is set, only get this status
  if ($status) {
    $status = ' WHERE mmc.status = "'. $status .'"';
  }
  if ($results = db_query("SELECT cid FROM {media_mover_configurations} mmc $status")) {
    $configurations = array();
    while ($cid = db_fetch_array($results)) {
      $configurations[$cid['cid']] = media_mover_api_configuration_get($cid['cid']);
    }
  }
  // Fire hook_media_mover_define_configurations
  // Load any configurationsd that are provided by other modules
  if ($code_based = module_invoke_all('media_mover_define_configurations')) {
    foreach ($code_based as $key => $value) {
      $code_based[$key]['default'] = TRUE;
    }
    $configurations = array_merge($configurations, $code_based);
  }
  return $configurations;
}


/**
 * takes a CID and returns the full configuration object
 * uses a local cache to store config data to prevent multiple hits the DB
 * @ingroup media_mover_configurations
 * @param $cid
 *   int, is a configuration id
 * @return object config
 */
function media_mover_api_configuration_get($cid) {
  // We locally cache the configurations here
  static $configurations;
  if (! $configurations[$cid]) {
    $configuration = new media_mover_configuration();
    $configuration->load($cid);
    $configurations[$cid] = $configuration;
  }
  // Return the config
  if ($configurations[$cid]) {
    return $configurations[$cid];
  }
}


/**
 * Gets a list of configurations that implement the specified module
 * @param $module_name
 *   string, module name
 * @param $action
 *   string, action name
 * @return array
 */
function media_mover_api_configurations_get_by_module($module_name, $action = NULL) {
  if ($module_name) {
    $conditions[] = 'module = "%s"';
  }
  if ($action) {
    $conditions[] = 'action = "%s"';
  }

  // find all the media mover steps that use specified module
  $results = db_query('SELECT sid FROM {media_mover_steps} WHERE '. implode(' AND ', $conditions), array($module_name, $action));
  while ($result = db_fetch_array($results)) {
    // Now we find all of the configurations that utilize this step
    $configurations = db_query("SELECT cid FROM {media_mover_step_map} WHERE sid = '%s'", $result['sid']);
    while ($cid = db_result($configurations)) {
      $configuration = media_mover_api_configuration_get($result['cid']);
      $options[$configuration->cid] = $configuration->name;
    }
  }
  if (count($options)) {
    return $options;
  }
}


/**
 * Retrieves all the configurations that implement this step
 * @param unknown_type $sid
 * @return unknown_type
 */
function media_mover_api_configurations_by_sid($sid) {
  $configurations = array();
  $results = db_query('SELECT cid FROM {media_mover_step_map} WHERE cid = %d', $sid);
  while ($cid = db_result($results)) {
    $configurations[$cid] = media_mover_api_configuration_get($cid);
  }
  return $configurations;
}


/**
 * Gets a complete list of steps in the system.
 * @return array of step objects
 */
function media_mover_api_steps_get() {
  static $steps;
  if (! $steps) {
    $steps = array();
    $results = db_query('SELECT sid FROM {media_mover_steps}');
    while ($sid = db_result($results)) {
      $steps[$sid] = media_mover_api_step_get($sid);
    }
  }
  return $steps;
}


/**
 * Retrieves the full data from a single step
 * @param $sid
 * @return object
 */
function media_mover_api_step_get($sid) {
  static $steps = array();
  if (! $steps[$sid]) {
    $step = new media_mover_step($sid);
    $steps[$sid] = $step;
  }
  return $steps[$sid];
}


/* *************************************************************** */
/* XSPF Playlist functions */
/* *************************************************************** */


/**
 * @TODO these need to be updated to XSPF v2
 */

/**
 * Implements hook_xspf_playlist_thumbnail().
 */
function media_mover_api_xspf_playlist_thumbnail($op, $node = NULL, $config = NULL) {
  switch ($op) {
    // defines what options xspf can use
    case 'define':
      $configurations = media_mover_api_configurations_get();
      foreach ($configurations as $configuration ) {
        $define['media_mover_api--'. $configuration->cid] = t('Media Mover: ') . $configuration->name;
      }
      return $define;
    break;

    case 'return':
      if ($file = $node->media_mover[$config][0]['complete_file']) {
        if (! strstr($file, 'http://')) {
          $file = file_create_url($file);
        }
        return $file;
      }
    break;
  }
}


/**
 * Implements hook_xspf_playlist_use().
 */
function media_mover_api_xspf_playlist_use($op, $node, $config) {
  switch ($op) {
    case 'define' :
      $configurations = media_mover_api_configurations_get();
      foreach ($configurations as $configuration ) {
        $define['media_mover_api--'. $configuration->cid] = t('Media Mover: ') . $configuration->name;
      }
      return $define;
    break;

    case 'views':
      $conditions = '%s.nid = node.nid';
      return array('tablename' => 'media_mover_files', 'conditions' => $conditions);
    break;

    case 'return':
      // get files for the running configuration
      if ($mmfiles = $node->media_mover[$config]) {
        $items = array();
        foreach ($mmfiles as $mmfile) {
          $filepath = $mmfile->filepath;
          // Make sure that the file path is complete
          $pattern = '/http.?\:\/\//';
          $url = preg_match($pattern, $filepath);
          if (! $url) {
            $filepath = file_create_url($filepath);
          }
          // only add the file if we have an incoming item
          if ($xspf_item = xspf_playlist_node_build_file_item($node, $filepath, null )) {
            $items[] = $xspf_item;
          }

        }
        return $items;
      }
    break;
  }
}
